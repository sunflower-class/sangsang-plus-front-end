name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_IMAGE: buildingbite/sangsangplus-frontend
  REGISTRY: docker.io

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      run: |
        echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_IMAGE }}
        tags: |
          type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
          type=sha,prefix={{branch}}-

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.prod
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1
          VITE_API_URL=${{ secrets.VITE_API_URL || 'https://oauth.buildingbite.com' }}
          VITE_GENERATE_URL=${{ secrets.VITE_GENERATE_URL || 'https://oauth.buildingbite.com' }}
          VITE_REVIEW_URL=${{ secrets.VITE_REVIEW_URL || 'https://oauth.buildingbite.com/api/review' }}
          VITE_QUESTION_URL=${{ secrets.VITE_QUESTION_URL || 'https://oauth.buildingbite.com/api/management' }}
          VITE_USER_URL=${{ secrets.VITE_USER_URL || 'https://oauth.buildingbite.com/api/users' }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Set up Kubeconfig
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > $HOME/.kube/config

    - name: Deploy to sangsangplus-frontend namespace
      run: |
        # Update image tag to latest
        sed -i "s|image: buildingbite/sangsangplus-frontend:.*|image: buildingbite/sangsangplus-frontend:latest|g" deployment.yaml
        
        # Check if namespace exists, create if it doesn't
        kubectl get namespace sangsangplus-frontend || kubectl create namespace sangsangplus-frontend
        
        # Apply to sangsangplus-frontend namespace
        kubectl apply -f deployment.yaml
        
        # Wait for rollout to complete
        kubectl rollout status deployment/frontend-service -n sangsangplus-frontend --timeout=600s

    - name: Run health check
      run: |
        # Wait for deployment to be ready
        kubectl wait --for=condition=available --timeout=300s deployment/frontend-service -n sangsangplus-frontend
        
        # Get the service endpoint for internal testing
        SERVICE_IP=$(kubectl get svc frontend-service -n sangsangplus-frontend -o jsonpath='{.spec.clusterIP}')
        
        # Port-forward for health check (since it's ClusterIP)
        kubectl port-forward -n sangsangplus-frontend svc/frontend-service 8080:80 &
        PF_PID=$!
        
        # Wait for port-forward to be ready
        sleep 10
        
        # Health check via port-forward (check if the main page loads)
        curl -f http://localhost:8080/ || exit 1
        
        # Clean up port-forward
        kill $PF_PID
        
        echo "Deployment successful!"
